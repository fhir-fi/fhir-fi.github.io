{"version":3,"file":"component---src-pages-background-js-80d4d77d7c6f172582c8.js","mappings":"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","sources":["webpack://fhir-demo-2025/./src/pages/background.js"],"sourcesContent":["import * as React from 'react';\n\nconst plantCount = 17;\nconst animationDuration = 10;\nconst fadeDuration = animationDuration * 2;\n\nconst Leaf = ({ fading = false, rotate, scale, x, y }) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <path\n        className={`${fading ? 'fading ' : ''}leaf`}\n        transform={`scale(${scale}) rotate(${rotate})`}\n        d=\"M20,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 v-20 Z\"\n      />\n    </g>\n  );\n};\n\nconst Flower = ({fading = false, rotate, scale, x, y }) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <path\n        className={`${fading ? 'fading ' : ''}flower`}\n        transform={`scale(${scale}) rotate(${rotate})`}        \n        d=\"M0,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 a10 10 0 0 1 0 -20 a10 10 0 0 1 20 0 Z\"\n      />\n    </g>\n  );\n};\n\nconst Plant = ({ animated, height, width }) => {\n  const lineLength = height / 5;\n  const strokeWidth = 3;\n\n  const [flowerScale, setFlowerScale] = React.useState(1);\n  const [leafScale, setLeafScale] = React.useState(0.4);\n\n  const [rootStalkPath, setRootStalkPath] = React.useState(<path />);\n  const [flower, setFlower] = React.useState(undefined);\n  const [clonedFlower, setClonedFlower] = React.useState([]);\n  const [branches, setBranches] = React.useState([]);\n  const [leaves, setLeaves] = React.useState([]);\n  const [clonedLeaves, setClonedLeaves] = React.useState([]);\n  const [dotPaths, setDotPaths] = React.useState([]);\n\n  React.useEffect(() => {\n    let x0 = Math.random() * width;\n    let y0 = (Math.random() * (height * 0.3)) + (height * 0.7);\n    let { x: x1, y: y1 } = { x: x0, y: y0 };\n    let { x: x2, y: y2 } = getRandomCoord({ x: x1, y: y1, direction: 0 });\n    let { x: x3, y: y3 } = getRandomCoord({ x: x2, y: y2, direction: Math.random() >= 0.5 ? 1 : 7 });\n    let direction = getRandomDirection()\n    let { x: x4, y: y4 } = getRandomCoord({ x: x3, y: y3, direction });\n    direction = getRandomDirection(direction)\n    let { x: x5, y: y5 } = getRandomCoord({ x: x4, y: y4, direction });\n    direction = getRandomDirection(direction)\n    let { x: x6, y: y6 } = getRandomCoord({ x: x5, y: y5, direction });\n    let longerStalk = Math.random() > 0.35;\n    let branchCount = Math.ceil(Math.random() * 3) + 1;\n    let plantBranches = [];\n    let dots = [];\n    let plantLeaves = [];\n    const rootStalk = `M ${x1} ${y1} C ${x2} ${y2}, ${x3} ${y3}, ${x4} ${y4}${\n      longerStalk ? ` S ${x5} ${y5} ${x6} ${y6}` : ''\n    }`;\n    setRootStalkPath(rootStalk);\n    let i = 0; // TODO: a static counter...\n    if (longerStalk) {\n      setFlower({\n        rotate: Math.random() * 90,\n        scale: 1,\n        x: x6,\n        y: y6,\n      });\n      dots.push({\n        leaf: `flower${i}`,\n        path: rootStalk,\n      });\n    }\n  \n   for (let j=0; j < branchCount; j += 1) {\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x7, y: y7, } = getRandomCoord({ x: x4, y: y4, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x8, y: y8, } = getRandomCoord({ x: x7, y: y7, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x9, y: y9, } = getRandomCoord({ x: x8, y: y8, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x10, y: y10, } = getRandomCoord({ x: x9, y: y9, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x11, y: y11, } = getRandomCoord({ x: x10, y: y10, direction, short: true });\n  \n      plantBranches.push(\n        <path\n          key={`branch${j}`}\n          className=\"branch stalk\"\n          d={`M ${x4} ${y4} C ${x7} ${y7}, ${x8} ${y8}, ${x9} ${y9} S ${x10} ${y10} ${x11} ${y11}`}\n          strokeWidth={(Math.random()) + 0.5}\n        />\n      );\n      setBranches(plantBranches);\n      plantLeaves.push({\n        rotate: Math.random() * 360,\n        scale: 0.4,\n        x: x11,\n        y: y11,\n      });\n      setLeaves(plantLeaves);\n  \n      dots.push({\n        leaf: `plant${i}leaf${j}`,\n        path: `M ${x1} ${y1} C ${x2} ${y2}, ${x3} ${y3}, ${x4} ${y4} C ${x7} ${y7}, ${x8} ${y8}, ${\n          x9} ${y9} S ${x10} ${y10} ${x11} ${y11}`,\n      });\n      setDotPaths(dots);\n    }\n  }, []);\n\n  function getRandomDirection(oldDirection = 0, wild = false) {\n    function getOppositeDirection(d) {\n      if (d >= 4) {\n        return d - 4;\n      }\n      return d + 4;\n    }\n    let direction = oldDirection;\n    while (direction === oldDirection || direction === getOppositeDirection(oldDirection)) {\n      direction = (Math.floor(Math.random() * (wild ? 8 : 4) + (wild ? 0 : 6))) % 8;\n    }\n    return direction;\n  }\n  \n  function getRandomCoord({ x, y, direction, short }) {\n    let distance = lineLength * (short ? 0.5 : 1) * ((Math.random() * 0.5) + 0.4);\n    let x1 = -1;\n    let y1 = -1;\n    let counter = 0;\n    while (x1 <= strokeWidth\n      || x1 >= (width - strokeWidth)\n      || y1 <= strokeWidth\n      || y1 >= (height - strokeWidth)) {\n      if (counter++ > 10) {\n        // Too difficult, we're in a tough corner...\n        return { x, y, direction};\n      }\n      // distance = distance / counter;\n      switch (direction) {\n        case 0:\n          x1 = x;\n          y1 = y - distance;\n          break;\n        case 1:\n          x1 = x + distance;\n          y1 = y - distance;\n          break;\n        case 2:\n          x1 = x + distance;\n          y1 = y;\n          break;\n        case 3:\n          x1 = x + distance;\n          y1 = y + distance;\n          break;\n        case 4:\n          x1 = x;\n          y1 = y + distance;\n          break;\n        case 5:\n          x1 = x - distance;\n          y1 = y + distance;\n          break;\n        case 6:\n          x1 = x - distance;\n          y1 = y;\n          break;\n        case 7:\n          x1 = x - distance;\n          y1 = y - distance;\n          break;\n        default:\n      }\n    }\n    return { x: x1, y: y1 };\n  }\n\n\n  function grow(node) {\n    node?.addEventListener(\n      'repeatEvent',\n      (e) => {\n        if (flower) {\n          if (flowerScale < 6) {\n            setFlowerScale(flowerScale * 1.1);\n//            flower.rotate = Math.min(Math.max(flower.rotate + (Math.random() * 30) - 15, -90), 90);\n          } else {\n            // Let's just override the potential previous one\n            setClonedFlower({\n              ...flower,\n              scale: flowerScale,\n            });\n            setFlowerScale(1);\n          }\n        }\n        if (leafScale < 5) {\n          setLeafScale(leafScale * 1.1);\n          setLeaves([...leaves.map(l => ({\n            ...l,\n            rotate: Math.min(Math.max(l.rotate + (Math.random() * 30) - 15, -360), 360),\n          }))]);\n        } else {\n          setClonedLeaves([...leaves.map(l => ({\n            ...l,\n            scale: leafScale,\n          }))]);\n          setLeafScale(0.4);\n        }\n      }\n    );\n  }\n\n  return (\n    <g className=\"plant\">\n      <path\n        className=\"root stalk\"\n        d={rootStalkPath}\n        strokeWidth=\"2.5\"\n      />\n      {branches}\n      {animated && dotPaths.map((p, i) => (\n        <circle key={`pulse-${i}`} fill=\"red\" r=\"1\" >\n          <animateMotion\n            dur={`${animationDuration}s`}\n            repeatCount=\"indefinite\"\n            data-leaf={p.leaf}\n            path={p.path}\n            ref={grow}\n          />\n        </circle>\n     ))}\n      {leaves.map((l, i) => <Leaf key={`leaf-${i}`} {...l} scale={leafScale} />)}\n      {clonedLeaves.map((l, i) => (<Leaf key={`leaf-${i}-clone`} {...l} fading={true} />))}\n      {flower && <Flower {...flower} scale={flowerScale} />}\n      {clonedFlower && <Flower {...clonedFlower} fading={true} className=\"fade\" />\n      }\n    </g>\n  );\n};\n\nconst Background = React.forwardRef((props, ref) => {\n  const {\n    animated: animatedParam = true,\n    children,\n    dimmed,\n    height: heightParam = 1200,\n    location = {},\n    pageContext,\n    pageResources,\n    params,\n    path,\n    serverData,\n    uri,\n    width: widthParam,\n    ...rest // This is what we really want...\n  } = props;\n  const { search } = location;\n\n  const [width, setWidth] = React.useState(widthParam);\n  const [height, setHeight] = React.useState(heightParam);\n  const [animated, setAnimated] = React.useState(animatedParam);\n\n  React.useEffect(() => {\n    if (width) {\n      // already set through a parameter\n      return;\n    }\n    const searchParams = new URLSearchParams(search);\n    if (searchParams.has('width')) {\n      setWidth(+searchParams.get('width'));\n      if (searchParams.has('height')) {\n        setHeight(+searchParams.get('height'));\n      }\n    } else {\n      setWidth(typeof window !== `undefined` ? window.innerWidth : 2500);\n    }\n    if (searchParams.has('animated')) {\n      const animatedParam = searchParams.get('animated').toLowerCase();\n      setAnimated(!['false', 'no', 'not'].some(v => v === animatedParam));\n    }\n  }, [search, width]);\n\n  if (width === undefined) {\n    return null;\n  }\n\n  const plants = [];\n  for (let i=0; i < plantCount; i += 1) {\n    plants.push(\n      <Plant\n        key={`plant-${i}`}\n        animated={animated}\n        height={height}\n        width={width}\n      />\n    )\n  }\n\n  const style = `\n    #plantBackground * {\n      transition: all 0.4s ease, transition: fill ${fadeDuration}s ease, transition: fill-opacity ${fadeDuration}s ease;\n    }\n    #plantBackground line {\n      stroke-width: 0.5px;\n      stroke: #010259;\n      stroke-opacity: 0.4;\n    }\n    #plantBackground .stalk {\n      fill: none;\n      stroke: green;\n    }\n    #plantBackground .leaf, #plantBackground .flower {\n      fill: green;\n      fill-opacity: 1;\n    }\n    #plantBackground .fading {\n      transition: fill-opacity ${fadeDuration}s ease;\n      fill: yellow;\n      fill-opacity: 0.2;\n    }\n\n    ${ dimmed\n      ? `\n      #plantBackground g {\n        opacity: 0.65;\n      }\n      `\n      : ''\n    }\n    @media screen and (prefers-reduced-motion: reduce) {\n      #plantBackground circle {\n        animation: none !important;\n        display: none;\n      }\n    }\n    @media print {\n      #plantBackground circle {\n        display: none;\n      }\n    }\n  `;\n\n  return (\n    <svg\n      id=\"plantBackground\"\n      ref={ref}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={`${width}px`}\n      height={`${height}px`}\n      viewBox={`0 0 ${width} ${height}`}\n      preserveAspectRatio=\"xMidYMid slice\"\n      {...rest}\n    >\n      <defs>\n        <style>{style}</style>\n        <path id=\"leaf\" className=\"leaf\" d=\"M20,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 v-20 Z\" />\n        <path id=\"flower\" className=\"leaf\" d=\"M0,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 a10 10 0 0 1 0 -20 a10 10 0 0 1 20 0 Z\" />\n      </defs>\n      { plants }\n    </svg>\n  )\n});\n\nexport default Background;\n\n/*\n\n  function handleMotionRef(node) {\n    // node?.onend = () => {} or\n    node?.addEventListener(\n      'beginEvent',\n      (e) => {\n        console.log('Starting...', e);\n      },\n      false,\n    );\n    node?.addEventListener(\n      'endEvent',\n      (e) => {\n        console.log('Finished!', e);\n      },\n      false,\n    );\n    node?.addEventListener(\n      'repeatEvent',\n      (e) => {\n        const leafId = e.target.dataset.leaf;\n        // const transforms = document.getElementById(leaf).getAttribute('transform');\n        const leaf = document.getElementById(leafId);\n        const transforms = leaf.transform.baseVal;\n        for (let ti = 0; ti < transforms.numberOfItems; ti += 1) {\n          const transform = transforms.getItem(ti);\n          switch (transform.type) {\n            case SVGTransform.SVG_TRANSFORM_SCALE:\n              const matrix = transform.matrix;\n              let newScale = (matrix?.a || 1) * 1.1;\n              // console.log('Scale!', transform, newScale, { leaf });\n              if (newScale > 5) {\n                // fade this one out, create a new one\n                const g = leaf.parentElement;\n                const fadingElement = document.getElementById('fade');\n                const clone = fadingElement.cloneNode(true);\n\n                console.log('cloning...', { leaf }, document.getElementById(leaf.href.baseVal.substring(1)));\n\n                clone.setAttribute('d', document.getElementById(leaf.href.baseVal.substring(1)).getAttribute('d'));\n                clone.setAttribute('transform', leaf.getAttribute('transform'));\n                clone.id = `${leafId}-clone`;\n\n                // clone.id += 'clone';\n                // clone.classList.add('fading');\n                /*\n                const animation = document.createElement('animation');\n                animation.setAttribute('attributeName', 'fill');\n                animation.setAttribute('values', 'yellow');\n                animation.setAttribute('dur', '3s');\n                clone.appendChild(animation);\n                *\n                g.appendChild(clone);\n                // clone.setAttribute('fill-opacity', '0.25');\n                newScale = 0.4;\n              }\n              transforms.getItem(ti).setScale(newScale, newScale);\n              break;\n            case SVGTransform.SVG_TRANSFORM_ROTATE:\n              const angle = transform.angle || 0;\n              const newAngle = Math.min(Math.max(angle + (Math.random() * 30) - 15, 0), 360);\n              transforms.getItem(ti).setRotate(newAngle, 0, 0);\n              break;\n            default:\n          }\n        }\n      },\n      false,\n    );\n  }\n\n\n*/ "],"names":["Leaf","_ref","fading","rotate","scale","x","y","React","transform","className","d","Flower","_ref2","Plant","_ref3","animated","height","width","lineLength","flowerScale","setFlowerScale","leafScale","setLeafScale","rootStalkPath","setRootStalkPath","flower","setFlower","undefined","clonedFlower","setClonedFlower","branches","setBranches","leaves","setLeaves","clonedLeaves","setClonedLeaves","dotPaths","setDotPaths","getRandomDirection","oldDirection","wild","direction","Math","floor","random","getRandomCoord","_ref4","short","distance","x1","y1","counter","grow","node","addEventListener","e","_toConsumableArray","map","l","min","max","x0","y0","x2","y2","x3","y3","x4","y4","x5","y5","x6","y6","longerStalk","branchCount","ceil","plantBranches","dots","plantLeaves","rootStalk","push","leaf","path","j","x7","y7","x8","y8","x9","y9","x10","y10","x11","y11","key","strokeWidth","p","i","fill","r","dur","repeatCount","ref","Object","assign","Background","props","animatedParam","children","dimmed","heightParam","location","pageContext","pageResources","params","serverData","uri","widthParam","rest","search","setWidth","setHeight","setAnimated","searchParams","URLSearchParams","has","get","window","innerWidth","toLowerCase","some","v","plants","style","id","xmlns","viewBox","preserveAspectRatio"],"sourceRoot":""}