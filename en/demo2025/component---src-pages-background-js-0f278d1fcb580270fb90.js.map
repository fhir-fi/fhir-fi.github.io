{"version":3,"file":"component---src-pages-background-js-0f278d1fcb580270fb90.js","mappings":"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","sources":["webpack://fhir-demo-2025/./src/pages/background.js"],"sourcesContent":["import * as React from 'react';\n\nconst Leaf = ({ fading = false, generation, rotate, scale, x, y }) => {\n  const [isFading, setFading] = React.useState(false);\n\n  React.useLayoutEffect(() => {\n    if (fading) {\n      setFading(false);\n      setTimeout(() => {\n        setFading(true);\n      }, 500);\n    }\n  }, [generation, fading]);\n\n  return (\n    <g key={`generation${generation}`} transform={`translate(${x},${y})`}>\n      <path\n        className={`${(fading && !isFading) ? 'about-to-fade ' : (isFading ? 'fading ' : '')}leaf`}\n        transform={`scale(${scale}) rotate(${rotate})`}\n        d=\"M20,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 v-20 Z\"\n      />\n    </g>\n  );\n};\n\nconst Flower = ({fading = false, generation, remove = f => f, rotate, scale, x, y }) => {\n  const [isFading, setFading] = React.useState(false);\n\n  React.useEffect(() => {\n    if (fading) {\n      setTimeout(() => {\n        setFading(true);\n      }, 500);\n    }\n  });\n\n  return (\n    <g key={`generation${generation}`} transform={`translate(${x},${y})`}>\n      <path\n        className={`${isFading ? 'fading ' : ''}flower`}\n        transform={`scale(${scale}) rotate(${rotate})`}        \n        d=\"M0,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 a10 10 0 0 1 0 -20 a10 10 0 0 1 20 0 Z\"\n        onTransitionEnd={isFading ? (e) => {\n          if (e.propertyName === 'fill-opacity') {\n            remove();\n          }\n         } : f => f}\n      />\n    </g>\n  );\n};\n\nconst Animator = ({ animationDuration, growListener, p, repeatSupported = false }) => {\n  const ref = React.useRef(null);\n\n  React.useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      if (!repeatSupported) {\n        // Safari, and perhaps other browsers that don't support events on animation repeat\n        // There is no really good way of verifying whether the event is fully supported\n        // (Safari has partial support). So let's use this method for all browsers...\n        const complexListener = (e) => {\n          growListener(e);\n          node.beginElement();\n        };\n        node.addEventListener('endEvent', complexListener);\n        node.beginElement();\n        return (() => {\n          node.removeEventListener('endEvent', complexListener);\n        });\n      } else {\n        node.addEventListener('repeatEvent', growListener);\n        return (() => {\n          node.removeEventListener('repeatEvent', growListener);\n        });\n      }\n    }\n  }, [ref, growListener, repeatSupported]);\n\n  return (\n    <animateMotion\n      begin={!repeatSupported ? 'indefinite' : 0}\n      dur={`${animationDuration}s`}\n      repeatCount={!repeatSupported ? 1 : 'indefinite'}\n      data-leaf={p.leaf}\n      path={p.path}\n      ref={growListener ? ref : undefined}\n    />\n  );\n};\n\nconst Plant = ({ animated, animationDuration, height, width }) => {\n  const lineLength = height / 5;\n  const strokeWidth = 3;\n\n  const flowerGeneration = React.useRef(0);\n  const leafGeneration = React.useRef(0);\n\n  const [flowerScale, setFlowerScale] = React.useState(1);\n  const [leafScale, setLeafScale] = React.useState(0.4);\n\n  const [rootStalkPath, setRootStalkPath] = React.useState('M0,0');\n  const [flower, setFlower] = React.useState(undefined);\n  const [clonedFlower, setClonedFlower] = React.useState(undefined);\n  const [branches, setBranches] = React.useState([]);\n  const [leaves, setLeaves] = React.useState([]);\n  const [clonedLeaves, setClonedLeaves] = React.useState([]);\n  const [dotPaths, setDotPaths] = React.useState([]);\n\n  React.useEffect(() => {\n    function getRandomCoord({ x, y, direction, short }) {\n      let distance = lineLength * (short ? 0.5 : 1) * ((Math.random() * 0.5) + 0.4);\n      let x1 = -1;\n      let y1 = -1;\n      let counter = 0;\n      while (x1 <= strokeWidth\n        || x1 >= (width - strokeWidth)\n        || y1 <= strokeWidth\n        || y1 >= (height - strokeWidth)) {\n        if (counter++ > 10) {\n          // Too difficult, we're in a tough corner...\n          return { x, y, direction};\n        }\n        // distance = distance / counter;\n        switch (direction) {\n          case 0:\n            x1 = x;\n            y1 = y - distance;\n            break;\n          case 1:\n            x1 = x + distance;\n            y1 = y - distance;\n            break;\n          case 2:\n            x1 = x + distance;\n            y1 = y;\n            break;\n          case 3:\n            x1 = x + distance;\n            y1 = y + distance;\n            break;\n          case 4:\n            x1 = x;\n            y1 = y + distance;\n            break;\n          case 5:\n            x1 = x - distance;\n            y1 = y + distance;\n            break;\n          case 6:\n            x1 = x - distance;\n            y1 = y;\n            break;\n          case 7:\n            x1 = x - distance;\n            y1 = y - distance;\n            break;\n          default:\n        }\n      }\n      return { x: x1, y: y1 };\n    }\n\n    let x0 = Math.random() * width;\n    let y0 = (Math.random() * (height * 0.3)) + (height * 0.7);\n    let { x: x1, y: y1 } = { x: x0, y: y0 };\n    let { x: x2, y: y2 } = getRandomCoord({ x: x1, y: y1, direction: 0 });\n    let { x: x3, y: y3 } = getRandomCoord({ x: x2, y: y2, direction: Math.random() >= 0.5 ? 1 : 7 });\n    let direction = getRandomDirection()\n    let { x: x4, y: y4 } = getRandomCoord({ x: x3, y: y3, direction });\n    direction = getRandomDirection(direction)\n    let { x: x5, y: y5 } = getRandomCoord({ x: x4, y: y4, direction });\n    direction = getRandomDirection(direction)\n    let { x: x6, y: y6 } = getRandomCoord({ x: x5, y: y5, direction });\n    let longerStalk = Math.random() > 0.35;\n    let branchCount = Math.ceil(Math.random() * 3) + 1;\n    let plantBranches = [];\n    let dots = [];\n    let plantLeaves = [];\n    const rootStalk = `M ${x1} ${y1} C ${x2} ${y2}, ${x3} ${y3}, ${x4} ${y4}${\n      longerStalk ? ` S ${x5} ${y5} ${x6} ${y6}` : ''\n    }`;\n    setRootStalkPath(rootStalk);\n    let i = 0; // TODO: a static counter...\n    if (longerStalk) {\n      setFlower({\n        flowerGeneration: flowerGeneration.current,\n        rotate: Math.random() * 90,\n        scale: 1,\n        x: x6,\n        y: y6,\n      });\n      dots.push({\n        leaf: `flower${i}`,\n        path: rootStalk,\n      });\n    }\n  \n   for (let j=0; j < branchCount; j += 1) {\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x7, y: y7, } = getRandomCoord({ x: x4, y: y4, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x8, y: y8, } = getRandomCoord({ x: x7, y: y7, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x9, y: y9, } = getRandomCoord({ x: x8, y: y8, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x10, y: y10, } = getRandomCoord({ x: x9, y: y9, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x11, y: y11, } = getRandomCoord({ x: x10, y: y10, direction, short: true });\n  \n      plantBranches.push(\n        <path\n          key={`branch${j}`}\n          className=\"branch stalk\"\n          d={`M ${x4} ${y4} C ${x7} ${y7}, ${x8} ${y8}, ${x9} ${y9} S ${x10} ${y10} ${x11} ${y11}`}\n          strokeWidth={(Math.random()) + 0.5}\n        />\n      );\n      setBranches(plantBranches);\n      plantLeaves.push({\n        generation: leafGeneration.current,\n        rotate: Math.random() * 360,\n        scale: 0.4,\n        x: x11,\n        y: y11,\n      });\n      setLeaves(plantLeaves);\n  \n      dots.push({\n        leaf: `plant${i}leaf${j}`,\n        path: `M ${x1} ${y1} C ${x2} ${y2}, ${x3} ${y3}, ${x4} ${y4} C ${x7} ${y7}, ${x8} ${y8}, ${\n          x9} ${y9} S ${x10} ${y10} ${x11} ${y11}`,\n      });\n      setDotPaths(dots);\n    }\n  }, [height, lineLength, width]);\n\n  function getRandomDirection(oldDirection = 0, wild = false) {\n    function getOppositeDirection(d) {\n      if (d >= 4) {\n        return d - 4;\n      }\n      return d + 4;\n    }\n    let direction = oldDirection;\n    while (direction === oldDirection || direction === getOppositeDirection(oldDirection)) {\n      direction = (Math.floor(Math.random() * (wild ? 8 : 4) + (wild ? 0 : 6))) % 8;\n    }\n    return direction;\n  }\n\n  const growListener = React.useCallback((e) => {\n    if (flower) {\n      if (flowerScale < 6) {\n        setFlowerScale(flowerScale * 1.1);\n        // flower.rotate = Math.min(Math.max(flower.rotate + (Math.random() * 30) - 15, -90), 90);\n      } else {\n        // Let's just override the potential previous one\n        const currentScale = flowerScale;\n        setFlowerScale(1);\n        setClonedFlower({\n          ...flower,\n          remove: () => {setClonedFlower(undefined)},\n          scale: currentScale,\n        });\n        flowerGeneration.current += 1;\n        setFlower({\n          ...flower,\n          generation: flowerGeneration.current,\n        });\n      }\n    }\n    if (leafScale < 5) {\n      setLeafScale(leafScale * 1.1);\n      setLeaves([...leaves.map(l => ({\n        ...l,\n        rotate: Math.min(Math.max(l.rotate + (Math.random() * 30) - 15, -360), 360),\n      }))]);\n    } else {\n      setClonedLeaves([...leaves.map(l => ({\n        ...l,\n        scale: leafScale,\n      }))]);\n      leafGeneration.current += 1;\n      setLeaves([...leaves.map(l => ({\n        ...l,\n        generation: leafGeneration.current,\n        rotate: Math.min(Math.max(l.rotate + (Math.random() * 30) - 15, -360), 360),\n      }))]);\n      setLeafScale(0.4);\n    }\n  }, [flower, flowerGeneration, flowerScale, leafGeneration, leafScale, leaves]);\n\n  return (\n    <g className=\"plant\">\n      <path\n        className=\"root stalk\"\n        d={rootStalkPath}\n        strokeWidth=\"2.5\"\n      />\n      {branches}\n      {animated && dotPaths.map((p, i) => (\n        <circle key={`pulse-${i}`} fill=\"red\" r=\"2\" >\n          <Animator\n            animationDuration={animationDuration}\n            growListener={i === 0 ? growListener : undefined}\n            p={p}\n          />\n        </circle>\n     ))}\n      {leaves.map((l, i) => <Leaf key={`leaf-${i}`} {...l} scale={leafScale} />)}\n      {clonedLeaves.map((l, i) => (<Leaf key={`leaf-${i}-clone`} {...l} fading={true} />))}\n      {flower && <Flower {...flower} scale={flowerScale} />}\n      {clonedFlower && <Flower {...clonedFlower} fading={true} className=\"fade\" />}\n    </g>\n  );\n};\n\nconst Background = React.forwardRef((props, ref) => {\n  const {\n    animated: animatedParam = true,\n    children,\n    dimmed,\n    height: heightParam,\n    location = {},\n    pageContext,\n    pageResources,\n    params,\n    path,\n    plantCount: plantCountParam = 17,\n    serverData,\n    speed: speedParam = 1,\n    uri,\n    width: widthParam,\n    ...rest // This is what we really want...\n  } = props;\n  const { search } = location;\n\n  const [width, setWidth] = React.useState(widthParam);\n  const [height, setHeight] = React.useState(heightParam);\n  const [plantCount, setplantCount] = React.useState(plantCountParam);\n  const [animated, setAnimated] = React.useState(animatedParam);\n  const [speed, setSpeed] = React.useState(speedParam);\n\n  const animationDuration = 10 / speed;\n  const fadeDuration = animationDuration * 2;\n\n  React.useEffect(() => {\n    const searchParams = new URLSearchParams(search);\n    if (!width) {\n      if (searchParams.has('width')) {\n        setWidth(+searchParams.get('width'));\n      } else {\n        setWidth(typeof window !== `undefined` ? window.innerWidth : 2560);\n      }\n    }\n    if (!height) {\n      if (searchParams.has('height')) {\n        setHeight(+searchParams.get('height'));\n      } else {\n        setHeight(typeof window !== `undefined` ? window.innerHeight : 1440);\n      }\n    }\n    if (searchParams.has('plants')) {\n      setplantCount(+searchParams.get('plants'));\n    }\n    if (searchParams.has('animated')) {\n      const animatedParam = searchParams.get('animated').toLowerCase();\n      setAnimated(!['false', 'no', 'not'].some(v => v === animatedParam));\n    }\n    if (searchParams.has('speed')) {\n      setSpeed(+searchParams.get('speed'));\n    }\n  }, [height, search, setAnimated, setHeight, setplantCount, setSpeed, setWidth, width]);\n\n  if (width === undefined) {\n    return null;\n  }\n\n  const style = `\n    #plantBackground * {\n      transition: transform 0.6s ease-in-out, fill ${fadeDuration}s ease-in-out, fill-opacity ${fadeDuration * 3}s ease-in-out;\n    }\n    #plantBackground line {\n      stroke-width: 0.5px;\n      stroke: #010259;\n      stroke-opacity: 0.4;\n    }\n    #plantBackground .stalk {\n      fill: none;\n      stroke: green;\n    }\n    #plantBackground .leaf, #plantBackground .flower, #plantBackground .about-to-fade {\n      fill: green;\n      fill-opacity: 1;\n    }\n    #plantBackground .fading {\n      fill: yellow;\n      fill-opacity: 0;\n    }${ dimmed\n      ? `\n    #plantBackground g {\n      opacity: 0.65;\n    }\n    `\n      : ''\n    }\n    #plantBackground .about-to-fade {\n      transition: transform 0s ease-in-out, fill 0s ease-in-out, fill-opacity 0s ease-in-out\n    }\n\n    @media screen and (prefers-reduced-motion: reduce) {\n      #plantBackground * {\n        animation: none !important;\n      }\n      #plantBackground circle {\n        display: none;\n      }\n    }\n    @media print {\n      #plantBackground circle {\n        display: none;\n      }\n    }\n  `;\n\n  return (\n    <svg\n      id=\"plantBackground\"\n      ref={ref}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={`${width}px`}\n      height={`${height}px`}\n      viewBox={`0 0 ${width} ${height}`}\n      preserveAspectRatio=\"xMidYMid slice\"\n      {...rest}\n    >\n      <defs>\n        <style>{style}</style>\n        <path id=\"leaf\" className=\"leaf\" d=\"M20,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 v-20 Z\" />\n        <path id=\"flower\" className=\"leaf\" d=\"M0,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 a10 10 0 0 1 0 -20 a10 10 0 0 1 20 0 Z\" />\n      </defs>\n      {Array.from(Array(plantCount)).map((d, i) => (\n        <Plant\n          key={`plant-${i}`}\n          animated={animated}\n          animationDuration={animationDuration}\n          height={height}\n          width={width}\n        />\n      ))}\n    </svg>\n  )\n});\n\nexport default Background;\n"],"names":["Leaf","_ref","fading","generation","rotate","scale","x","y","isFading","setFading","React","setTimeout","key","transform","className","d","Flower","_ref2","remove","f","onTransitionEnd","e","propertyName","Animator","_ref3","animationDuration","growListener","p","repeatSupported","ref","node","current","addEventListener","removeEventListener","complexListener","beginElement","begin","dur","repeatCount","leaf","path","undefined","Plant","_ref4","animated","height","width","lineLength","flowerGeneration","leafGeneration","flowerScale","setFlowerScale","leafScale","setLeafScale","rootStalkPath","setRootStalkPath","flower","setFlower","clonedFlower","setClonedFlower","branches","setBranches","leaves","setLeaves","clonedLeaves","setClonedLeaves","dotPaths","setDotPaths","getRandomDirection","oldDirection","wild","direction","Math","floor","random","getRandomCoord","_ref5","short","distance","x1","y1","counter","x0","y0","x2","y2","x3","y3","x4","y4","x5","y5","x6","y6","longerStalk","branchCount","ceil","plantBranches","dots","plantLeaves","rootStalk","push","j","x7","y7","x8","y8","x9","y9","x10","y10","x11","y11","strokeWidth","currentScale","_toConsumableArray","map","l","min","max","i","fill","r","Object","assign","Background","props","animatedParam","children","dimmed","heightParam","location","pageContext","pageResources","params","plantCount","plantCountParam","serverData","speed","speedParam","uri","widthParam","rest","search","setWidth","setHeight","setplantCount","setAnimated","setSpeed","fadeDuration","searchParams","URLSearchParams","has","get","window","innerWidth","innerHeight","toLowerCase","some","v","style","id","xmlns","viewBox","preserveAspectRatio","Array","from"],"sourceRoot":""}