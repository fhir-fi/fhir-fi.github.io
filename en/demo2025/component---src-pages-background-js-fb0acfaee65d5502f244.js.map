{"version":3,"file":"component---src-pages-background-js-fb0acfaee65d5502f244.js","mappings":"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","sources":["webpack://fhir-demo-2025/./src/pages/background.js"],"sourcesContent":["import * as React from 'react';\n\nconst Leaf = ({ fading = false, rotate, scale, x, y }) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <path\n        className={`${fading ? 'fading ' : ''}leaf`}\n        transform={`scale(${scale}) rotate(${rotate})`}\n        d=\"M20,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 v-20 Z\"\n      />\n    </g>\n  );\n};\n\nconst Flower = ({fading = false, rotate, scale, x, y }) => {\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <path\n        className={`${fading ? 'fading ' : ''}flower`}\n        transform={`scale(${scale}) rotate(${rotate})`}        \n        d=\"M0,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 a10 10 0 0 1 0 -20 a10 10 0 0 1 20 0 Z\"\n      />\n    </g>\n  );\n};\n\nconst Plant = ({ animated, animationDuration, height, width }) => {\n  const lineLength = height / 5;\n  const strokeWidth = 3;\n\n  const [flowerScale, setFlowerScale] = React.useState(1);\n  const [leafScale, setLeafScale] = React.useState(0.4);\n\n  const [rootStalkPath, setRootStalkPath] = React.useState(<path />);\n  const [flower, setFlower] = React.useState(undefined);\n  const [clonedFlower, setClonedFlower] = React.useState(undefined);\n  const [branches, setBranches] = React.useState([]);\n  const [leaves, setLeaves] = React.useState([]);\n  const [clonedLeaves, setClonedLeaves] = React.useState([]);\n  const [dotPaths, setDotPaths] = React.useState([]);\n\n  React.useEffect(() => {\n    function getRandomCoord({ x, y, direction, short }) {\n      let distance = lineLength * (short ? 0.5 : 1) * ((Math.random() * 0.5) + 0.4);\n      let x1 = -1;\n      let y1 = -1;\n      let counter = 0;\n      while (x1 <= strokeWidth\n        || x1 >= (width - strokeWidth)\n        || y1 <= strokeWidth\n        || y1 >= (height - strokeWidth)) {\n        if (counter++ > 10) {\n          // Too difficult, we're in a tough corner...\n          return { x, y, direction};\n        }\n        // distance = distance / counter;\n        switch (direction) {\n          case 0:\n            x1 = x;\n            y1 = y - distance;\n            break;\n          case 1:\n            x1 = x + distance;\n            y1 = y - distance;\n            break;\n          case 2:\n            x1 = x + distance;\n            y1 = y;\n            break;\n          case 3:\n            x1 = x + distance;\n            y1 = y + distance;\n            break;\n          case 4:\n            x1 = x;\n            y1 = y + distance;\n            break;\n          case 5:\n            x1 = x - distance;\n            y1 = y + distance;\n            break;\n          case 6:\n            x1 = x - distance;\n            y1 = y;\n            break;\n          case 7:\n            x1 = x - distance;\n            y1 = y - distance;\n            break;\n          default:\n        }\n      }\n      return { x: x1, y: y1 };\n    }\n\n    let x0 = Math.random() * width;\n    let y0 = (Math.random() * (height * 0.3)) + (height * 0.7);\n    let { x: x1, y: y1 } = { x: x0, y: y0 };\n    let { x: x2, y: y2 } = getRandomCoord({ x: x1, y: y1, direction: 0 });\n    let { x: x3, y: y3 } = getRandomCoord({ x: x2, y: y2, direction: Math.random() >= 0.5 ? 1 : 7 });\n    let direction = getRandomDirection()\n    let { x: x4, y: y4 } = getRandomCoord({ x: x3, y: y3, direction });\n    direction = getRandomDirection(direction)\n    let { x: x5, y: y5 } = getRandomCoord({ x: x4, y: y4, direction });\n    direction = getRandomDirection(direction)\n    let { x: x6, y: y6 } = getRandomCoord({ x: x5, y: y5, direction });\n    let longerStalk = Math.random() > 0.35;\n    let branchCount = Math.ceil(Math.random() * 3) + 1;\n    let plantBranches = [];\n    let dots = [];\n    let plantLeaves = [];\n    const rootStalk = `M ${x1} ${y1} C ${x2} ${y2}, ${x3} ${y3}, ${x4} ${y4}${\n      longerStalk ? ` S ${x5} ${y5} ${x6} ${y6}` : ''\n    }`;\n    setRootStalkPath(rootStalk);\n    let i = 0; // TODO: a static counter...\n    if (longerStalk) {\n      setFlower({\n        rotate: Math.random() * 90,\n        scale: 1,\n        x: x6,\n        y: y6,\n      });\n      dots.push({\n        leaf: `flower${i}`,\n        path: rootStalk,\n      });\n    }\n  \n   for (let j=0; j < branchCount; j += 1) {\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x7, y: y7, } = getRandomCoord({ x: x4, y: y4, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x8, y: y8, } = getRandomCoord({ x: x7, y: y7, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x9, y: y9, } = getRandomCoord({ x: x8, y: y8, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x10, y: y10, } = getRandomCoord({ x: x9, y: y9, direction, short: true });\n      direction = getRandomDirection(direction, Math.random() > 0.5)\n      let { x: x11, y: y11, } = getRandomCoord({ x: x10, y: y10, direction, short: true });\n  \n      plantBranches.push(\n        <path\n          key={`branch${j}`}\n          className=\"branch stalk\"\n          d={`M ${x4} ${y4} C ${x7} ${y7}, ${x8} ${y8}, ${x9} ${y9} S ${x10} ${y10} ${x11} ${y11}`}\n          strokeWidth={(Math.random()) + 0.5}\n        />\n      );\n      setBranches(plantBranches);\n      plantLeaves.push({\n        rotate: Math.random() * 360,\n        scale: 0.4,\n        x: x11,\n        y: y11,\n      });\n      setLeaves(plantLeaves);\n  \n      dots.push({\n        leaf: `plant${i}leaf${j}`,\n        path: `M ${x1} ${y1} C ${x2} ${y2}, ${x3} ${y3}, ${x4} ${y4} C ${x7} ${y7}, ${x8} ${y8}, ${\n          x9} ${y9} S ${x10} ${y10} ${x11} ${y11}`,\n      });\n      setDotPaths(dots);\n    }\n  }, [height, lineLength, width]);\n\n  function getRandomDirection(oldDirection = 0, wild = false) {\n    function getOppositeDirection(d) {\n      if (d >= 4) {\n        return d - 4;\n      }\n      return d + 4;\n    }\n    let direction = oldDirection;\n    while (direction === oldDirection || direction === getOppositeDirection(oldDirection)) {\n      direction = (Math.floor(Math.random() * (wild ? 8 : 4) + (wild ? 0 : 6))) % 8;\n    }\n    return direction;\n  }\n\n  function grow(node) {\n    node?.addEventListener(\n      'repeatEvent',\n      (e) => {\n        if (flower) {\n          if (flowerScale < 6) {\n            setFlowerScale(flowerScale * 1.1);\n//            flower.rotate = Math.min(Math.max(flower.rotate + (Math.random() * 30) - 15, -90), 90);\n          } else {\n            // Let's just override the potential previous one\n            setClonedFlower({\n              ...flower,\n              scale: flowerScale,\n            });\n            setFlowerScale(1);\n          }\n        }\n        if (leafScale < 5) {\n          setLeafScale(leafScale * 1.1);\n          setLeaves([...leaves.map(l => ({\n            ...l,\n            rotate: Math.min(Math.max(l.rotate + (Math.random() * 30) - 15, -360), 360),\n          }))]);\n        } else {\n          setClonedLeaves([...leaves.map(l => ({\n            ...l,\n            scale: leafScale,\n          }))]);\n          setLeafScale(0.4);\n        }\n      }\n    );\n  }\n\n  return (\n    <g className=\"plant\">\n      <path\n        className=\"root stalk\"\n        d={rootStalkPath}\n        strokeWidth=\"2.5\"\n      />\n      {branches}\n      {animated && dotPaths.map((p, i) => (\n        <circle key={`pulse-${i}`} fill=\"red\" r=\"2\" >\n          <animateMotion\n            dur={`${animationDuration}s`}\n            repeatCount=\"indefinite\"\n            data-leaf={p.leaf}\n            path={p.path}\n            ref={grow}\n          />\n        </circle>\n     ))}\n      {leaves.map((l, i) => <Leaf key={`leaf-${i}`} {...l} scale={leafScale} />)}\n      {clonedLeaves.map((l, i) => (<Leaf key={`leaf-${i}-clone`} {...l} fading={true} />))}\n      {flower && <Flower {...flower} scale={flowerScale} />}\n      {clonedFlower && <Flower {...clonedFlower} fading={true} className=\"fade\" />\n      }\n    </g>\n  );\n};\n\nconst Background = React.forwardRef((props, ref) => {\n  const {\n    animated: animatedParam = true,\n    children,\n    dimmed,\n    height: heightParam,\n    location = {},\n    pageContext,\n    pageResources,\n    params,\n    path,\n    plantCount: plantCountParam = 17,\n    serverData,\n    speed: speedParam = 1,\n    uri,\n    width: widthParam,\n    ...rest // This is what we really want...\n  } = props;\n  const { search } = location;\n\n  const [width, setWidth] = React.useState(widthParam);\n  const [height, setHeight] = React.useState(heightParam);\n  const [plantCount, setplantCount] = React.useState(plantCountParam);\n  const [animated, setAnimated] = React.useState(animatedParam);\n  const [speed, setSpeed] = React.useState(speedParam);\n\n  const animationDuration = 10 / speed;\n  const fadeDuration = animationDuration * 2;\n\n  React.useEffect(() => {\n    const searchParams = new URLSearchParams(search);\n    if (!width) {\n      if (searchParams.has('width')) {\n        setWidth(+searchParams.get('width'));\n      } else {\n        setWidth(typeof window !== `undefined` ? window.innerWidth : 2560);\n      }\n    }\n    if (!height) {\n      if (searchParams.has('height')) {\n        setHeight(+searchParams.get('height'));\n      } else {\n        setHeight(typeof window !== `undefined` ? window.innerHeight : 1440);\n      }\n    }\n    if (searchParams.has('plants')) {\n      setplantCount(+searchParams.get('plants'));\n    }\n    if (searchParams.has('animated')) {\n      const animatedParam = searchParams.get('animated').toLowerCase();\n      setAnimated(!['false', 'no', 'not'].some(v => v === animatedParam));\n    }\n    if (searchParams.has('speed')) {\n      setSpeed(+searchParams.get('speed'));\n    }\n  }, [height, search, setAnimated, setHeight, setplantCount, setSpeed, setWidth, width]);\n\n  if (width === undefined) {\n    return null;\n  }\n\n  const plants = [];\n  for (let i=0; i < plantCount; i += 1) {\n    plants.push(\n      <Plant\n        key={`plant-${i}`}\n        animated={animated}\n        animationDuration={animationDuration}\n        height={height}\n        width={width}\n      />\n    )\n  }\n\n  const style = `\n    #plantBackground * {\n      transition: all 0.4s ease, transition: fill ${fadeDuration}s ease, transition: fill-opacity ${fadeDuration}s ease;\n    }\n    #plantBackground line {\n      stroke-width: 0.5px;\n      stroke: #010259;\n      stroke-opacity: 0.4;\n    }\n    #plantBackground .stalk {\n      fill: none;\n      stroke: green;\n    }\n    #plantBackground .leaf, #plantBackground .flower {\n      fill: green;\n      fill-opacity: 1;\n    }\n    #plantBackground .fading {\n      transition: fill-opacity ${fadeDuration}s ease;\n      fill: yellow;\n      fill-opacity: 0.2;\n    }${ dimmed\n      ? `\n    #plantBackground g {\n      opacity: 0.65;\n    }\n    `\n      : ''\n    }\n    @media screen and (prefers-reduced-motion: reduce) {\n      #plantBackground circle {\n        animation: none !important;\n        display: none;\n      }\n    }\n    @media print {\n      #plantBackground circle {\n        display: none;\n      }\n    }\n  `;\n\n  return (\n    <svg\n      id=\"plantBackground\"\n      ref={ref}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={`${width}px`}\n      height={`${height}px`}\n      viewBox={`0 0 ${width} ${height}`}\n      preserveAspectRatio=\"xMidYMid slice\"\n      {...rest}\n    >\n      <defs>\n        <style>{style}</style>\n        <path id=\"leaf\" className=\"leaf\" d=\"M20,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 v-20 Z\" />\n        <path id=\"flower\" className=\"leaf\" d=\"M0,0 a10 10 0 0 1 0 20 a10 10 0 0 1 -20 0 a10 10 0 0 1 0 -20 a10 10 0 0 1 20 0 Z\" />\n      </defs>\n      { plants }\n    </svg>\n  )\n});\n\nexport default Background;\n"],"names":["Leaf","_ref","fading","rotate","scale","x","y","React","transform","className","d","Flower","_ref2","Plant","_ref3","animated","animationDuration","height","width","lineLength","flowerScale","setFlowerScale","leafScale","setLeafScale","rootStalkPath","setRootStalkPath","flower","setFlower","undefined","clonedFlower","setClonedFlower","branches","setBranches","leaves","setLeaves","clonedLeaves","setClonedLeaves","dotPaths","setDotPaths","getRandomDirection","oldDirection","wild","direction","Math","floor","random","grow","node","addEventListener","e","_toConsumableArray","map","l","min","max","getRandomCoord","_ref4","short","distance","x1","y1","counter","x0","y0","x2","y2","x3","y3","x4","y4","x5","y5","x6","y6","longerStalk","branchCount","ceil","plantBranches","dots","plantLeaves","rootStalk","push","leaf","path","j","x7","y7","x8","y8","x9","y9","x10","y10","x11","y11","key","strokeWidth","p","i","fill","r","dur","repeatCount","ref","Object","assign","Background","props","animatedParam","children","dimmed","heightParam","location","pageContext","pageResources","params","plantCount","plantCountParam","serverData","speed","speedParam","uri","widthParam","rest","search","setWidth","setHeight","setplantCount","setAnimated","setSpeed","fadeDuration","searchParams","URLSearchParams","has","get","window","innerWidth","innerHeight","toLowerCase","some","v","plants","style","id","xmlns","viewBox","preserveAspectRatio"],"sourceRoot":""}